deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    #has_g1.is_true: Boolean
    true_grades.true_grade:Categorical(8)
  }

  # Put your extractors here
  extraction.extractors {
    # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM true_grades;
        DELETE FROM grade_mentions;
        DELETE FROM grade_candidates;
        DELETE FROM grade_features;
        DELETE FROM has_g1;
        """
    }

    # Extractor 2: extract grade mentions:
    ext_grade {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  patient_id,
                sentence_id,
                array_to_string(words, '~^~'),
                array_to_string(lemma, '~^~')
          FROM  sentences"""

      # output of extractor will be written to this table:
      output_relation: "grade_mentions"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_grade.py"

      dependencies: ["ext_clear_table"]
    }
   
    # Extractor 3: extract multiclass true grade features:
    ext_true_grade {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  patient_id
        FROM    grade_mentions"""
      # output of extractor will be written to this table:
      output_relation: "true_grades"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_true_grade.py"

      #dependencies: ["ext_clear_table"]
      dependencies: ["ext_grade"]
    }
    
    # Extractor 3: extract 1 vs all (has_g1) grade features:
    ext_g1 {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  patient_id
        FROM    grade_mentions"""
      # output of extractor will be written to this table:
      output_relation: "has_g1"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_g1.py"

      dependencies: ["ext_grade"]
    }
    
    # Extractor 4: extract fine-tune grade features:
    ext_grade_features {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  grade_mentions.patient_id,
                string_agg(mention_id, E'~^~') AS mention,
                string_agg(lemma_phrase, E'~^~') AS lemma,
                true_grade
          FROM  grade_mentions, true_grades
          WHERE grade_mentions.patient_id = true_grades.patient_id
          GROUP BY grade_mentions.patient_id, true_grades.true_grade
          ORDER BY grade_mentions.patient_id"""
      # output of extractor will be written to this table:
      output_relation: "grade_features"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_grade_features.py"
      
      dependencies: ["ext_true_grade"]
    }
    
    # Extractor 4: extract fine-tune grade features:
    #ext_grade_features {
    #  # The style of the extractor
    #  style: "tsv_extractor"
    #  # An input to the extractor is a row (tuple) of the following query:
    #  input: """
    #    SELECT  patient_id,
    #            string_agg(mention_id, E'~^~') AS mention,
    #            string_agg(lemma_phrase, E'~^~') AS lemma
    #      FROM  grade_mentions
    #      GROUP BY patient_id
    #      ORDER BY patient_id"""
    #  # output of extractor will be written to this table:
    #  output_relation: "grade_features"

      # This user-defined function will be performed on each row (tuple) of input query:
    #  udf: ${APP_HOME}"/udf/ext_grade_features.py"
      
    #  dependencies: ["ext_grade"]
    #}


    # Extractor 5: manual (weight) extract fine-tune grade candidate:
    ext_grade_finetune {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  patient_id,
                string_agg(mention_id, E'~^~') AS mention,
                string_agg(lemma_phrase, E'~^~') AS lemma
          FROM  grade_mentions
          GROUP BY patient_id
          ORDER BY patient_id"""
      # output of extractor will be written to this table:
      output_relation: "grade_candidates"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_grade_finetune.py"
      
      dependencies: ["ext_grade"]
    }
  }

  # Put your inference rules here
  inference.factors {
     # A simple logistic regression rule
     #f_has_grade_1 {

       # input to the inference rule is all the has_spouse candidate relations,
       #   as well as the features connected to them:
     #  input_query: """
     #    SELECT has_g1.id      AS "has_g1.id",
     #           has_g1.is_true AS "has_g1.is_true",
     #           grade_features.feature
     #    FROM has_g1,
     #         grade_features
     #    WHERE text(has_g1.patient_id) = (grade_features.patient_id)
     #    """

     #  # Factor function:
     #  function : "IsTrue(has_g1.is_true)"

       # Weight of the factor is decided by the value of "feature" column in input query
     #  weight   : "?(feature)"
     #}

    feature_factor {
      input_query: """
        SELECT  true_grades.id    AS "true_grades.id",
                true_grades.true_grade AS "true_grades.true_grade",
                grade_features.feature
        FROM    true_grades, 
                grade_features
        WHERE   true_grades.patient_id = grade_features.patient_id
        """

      # Factor function:
      function: "Multinomial(true_grades.true_grade)"
      weight: "?(feature)"
    }
  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25

  # calibration.holdout_query:"""
  #   DROP TABLE IF EXISTS holdout_sentence_ids CASCADE;

  #   CREATE TABLE holdout_sentence_ids AS
  #   SELECT sentence_id FROM sentences WHERE RANDOM() < 0.25;

  #   INSERT INTO dd_graph_variables_holdout(variable_id)
  #   SELECT id FROM has_spouse WHERE sentence_id IN
  #   (SELECT * FROM holdout_sentence_ids);
  # """



}
